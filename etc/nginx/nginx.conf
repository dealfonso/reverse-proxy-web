user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 768;
        # multi_accept on;
}

stream {
    # Este es un hack para que se genere igualmente el mapeo para el puerto 80 y el puerto 443,
    #   utilizando la variable http_host; de esta forma hacemos que valga $ssl_preread_server_name
    map * $http_host {
        default $ssl_preread_server_name;
    }

    # Aqui se definira la variable "server_443" en funcion de la variable "http_host" y
    #   http_host se mapeara a ssl_preread_server_name
    include /etc/nginx/proxy-manager/configuracion_nginx.443.conf;

    # La variable proxy se resuelve en funcion de la variable ssl_preread_server_name
    map $ssl_preread_server_name $proxy {
        # Este es el interfaz de gestion, que esta en otro puerto
        <PROXY_DNS>   127.0.0.1:10443;

        # Cualquier otro valor se debe resolver en funcion de la variable "server", que
        # esta definida en el fichero /etc/nginx/proxy_config/configuracion_nginx.conf
        ~^.*$   $server_443;
    }

    # Esta es la parte en la que se inicia la comprobacion del host, para hacer proxy_pass
    #   donde corresponda (dependiendo de si esta inventariado o no)
    server {
        listen 443;

        proxy_connect_timeout 30s;
        proxy_timeout 30s;
	    proxy_buffer_size	16k;

        # Esto hara que se intente ver que valor tiene la variable $proxy
        proxy_pass $proxy;
        ssl_preread on;
    }

    # Este es el valor por defecto para el caso de que se ponga un nombre que no exista
    upstream localhost {
        server 127.0.0.1:20443;
    }
}

http {
    # Aqui se definira la variable "server_80" en funcion de la variable "http_host"
    include /etc/nginx/proxy-manager/configuracion_nginx.80.conf;

    # Definimos un servidor que actue como proxy y que envie la informacion al host
    #   en la variable "server" (que se resuelve como un mapeo de http_host)
    server {
        listen 80 default_server;
        root /var/www/html;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            if ($server_80 != "localhost") {
                proxy_pass http://$server_80;
            }
        }
    }

    # Este es el servidor local que va a ejecutar la aplicacion del frontend; por eso tiene
    #   activado php y tiene el certificado de <PROXY_DNS>
    server {
        listen 10443 ssl;
        server_name             <PROXY_DNS>;
        ssl_certificate         /etc/letsencrypt/live/<PROXY_DNS>/fullchain.pem;
        ssl_certificate_key     /etc/letsencrypt/live/<PROXY_DNS>/privkey.pem;
        ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers             HIGH:!aNULL:!MD5;

        access_log              /var/log/nginx/<PROXY_DNS>.access_log;
        error_log               /var/log/nginx/<PROXY_DNS>.error_log;

        # Este es el path donde esta la aplicacion php
        root /var/www/proxy-manager/;
        index index.php;

        #Specifies that Nginx is looking for .php files
        location ~ \.php$ {
            #If a file isn’t found, 404
            try_files $uri =404;
            #Include Nginx’s fastcgi configuration
            include /etc/nginx/fastcgi.conf;
            #Look for the FastCGI Process Manager at this location
            fastcgi_pass unix:/run/php/php-fpm.sock;
        }
    }

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    #keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}
